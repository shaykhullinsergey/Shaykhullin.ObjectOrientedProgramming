}
namespace Shaykhullin.Lab6
{
	public class TryHighlighter : KeywordHighlighter
	{
		public override string Keyword => "try";
	}
}
namespace Shaykhullin.Lab6
{
	public class TypeofHighlighter : KeywordHighlighter
	{
		public override string Keyword => "typeof";
	}
}
namespace Shaykhullin.Lab6
{
	public class UintHighlighter : KeywordHighlighter
	{
		public override string Keyword => "uint";
	}
}
namespace Shaykhullin.Lab6
{
	public class UlongHighlighter : KeywordHighlighter
	{
		public override string Keyword => "ulong";
	}
}
namespace Shaykhullin.Lab6
{
	public class UncheckedHighlighter : KeywordHighlighter
	{
		public override string Keyword => "unchecked";
	}
}
namespace Shaykhullin.Lab6
{
	public class UnsafeHighlighter : KeywordHighlighter
	{
		public override string Keyword => "unsafe";
	}
}
namespace Shaykhullin.Lab6
{
	public class UshortHighlighter : KeywordHighlighter
	{
		public override string Keyword => "ushort";
	}
}
namespace Shaykhullin.Lab6
{
	public class UsingHighlighter : KeywordHighlighter
	{
		public override string Keyword => "using";
	}
}
namespace Shaykhullin.Lab6
{
	public class ValueHighlighter : KeywordHighlighter
	{
		public override string Keyword => "value";
	}
}
namespace Shaykhullin.Lab6
{
	public class VarHighlighter : KeywordHighlighter
	{
		public override string Keyword => "var";
	}
}
namespace Shaykhullin.Lab6
{
	public class VirtualHighlighter : KeywordHighlighter
	{
		public override string Keyword => "virtual";
	}
}
namespace Shaykhullin.Lab6
{
	public class VoidHighlighter : KeywordHighlighter
	{
		public override string Keyword => "void";
	}
}
namespace Shaykhullin.Lab6
{
	public class VolatileHighlighter : KeywordHighlighter
	{
		public override string Keyword => "volatile";
	}
}
namespace Shaykhullin.Lab6
{
	public class WhereHighlighter : KeywordHighlighter
	{
		public override string Keyword => "where";
	}
}
namespace Shaykhullin.Lab6
{
	public class WhileHighlighter : KeywordHighlighter
	{
		public override string Keyword => "while";
	}
}
namespace Shaykhullin.Lab6
{
	public class YieldHighlighter : KeywordHighlighter
	{
		public override string Keyword => "yield";
	}
}
using System.Drawing;
using System.Windows.Forms;

namespace Shaykhullin.Lab6
{
	public abstract class Highlighter
	{
		public abstract string Keyword { get; }
		public abstract Color Color { get; }

		public bool IsSatisfied(string keyword, int index)
		{
			for (var i = 0; i < Keyword.Length; i++)
			{
				if (index + i >= keyword.Length || keyword[index + i] != Keyword[i])
				{
					return false;
				}
			}

			return true;
		}

		public virtual void Apply(RichTextBox editor)
		{
			editor.SelectionLength = Keyword.Length;
			editor.SelectionColor = Color;
			editor.SelectionStart += Keyword.Length;
			editor.SelectionLength = 0;
		}
	}
}
using System.Reflection;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Shaykhullin.Lab6")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("Shaykhullin.Lab6")]
[assembly: AssemblyCopyright("Copyright Â©  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("74552892-0f97-4245-9359-94ef1e60b943")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shaykhullin.Lab6.Properties
{


  /// <summary>
  ///   A strongly-typed resource class, for looking up localized strings, etc.
  /// </summary>
  // This class was auto-generated by the StronglyTypedResourceBuilder
  // class via a tool like ResGen or Visual Studio.
  // To add or remove a member, edit your .ResX file then rerun ResGen
  // with the /str option, or rebuild your VS project.
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  internal class Resources
  {

    private static global::System.Resources.ResourceManager resourceMan;

    private static global::System.Globalization.CultureInfo resourceCulture;

    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal Resources()
    {
    }

    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager
    {
      get
      {
        if ((resourceMan == null))
        {
          global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Shaykhullin.Lab6.Properties.Resources", typeof(Resources).Assembly);
          resourceMan = temp;
        }
        return resourceMan;
      }
    }

    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture
    {
      get
      {
        return resourceCulture;
      }
      set
      {
        resourceCulture = value;
      }
    }
  }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shaykhullin.Lab6.Properties
{


  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
  internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
  {

    private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

    public static Settings Default
    {
      get
      {
        return defaultInstance;
      }
    }
  }
}
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Shaykhullin.Lab6.Commands;

namespace Shaykhullin.Lab6.ViewModels
{
	public class CodeEditorViewModel
	{
		private readonly IList<Command> commands;
		private readonly IList<Highlighter> highlighters;
		private readonly KeyState state;

		public CodeEditorViewModel()
		{
			commands = typeof(Command).Assembly.GetTypes()
				.Where(type => !type.IsAbstract)
				.Where(type => typeof(Command).IsAssignableFrom(type))
				.Select(type => (Command)Activator.CreateInstance(type))
				.ToList();

			highlighters = typeof(Highlighter).Assembly.GetTypes()
				.Where(type => !type.IsAbstract)
				.Where(type => typeof(Highlighter).IsAssignableFrom(type))
				.Select(type => (Highlighter)Activator.CreateInstance(type))
				.OrderByDescending(h => h.Keyword.Length)
				.ToList();

			state = new KeyState();
		}

		public void UpdateState(KeyEventArgs args)
		{
			state.Update(args);
		}

		public void TryExecuteCommand(RichTextBox editor, KeyEventArgs args)
		{
			for (var i = 0; i < commands.Count; i++)
			{
				if (commands[i].IsSatisfied(args.KeyCode, state))
				{
					commands[i].Apply(editor);
					return;
				}
			}
		}

		public bool TryExecuteHighlighter(RichTextBox editor, string keyword, int index)
		{
			for (var i = 0; i < highlighters.Count; i++)
			{
				if (highlighters[i].IsSatisfied(keyword, index))
				{
					highlighters[i].Apply(editor);
					return true;
				}
			}

			return false;
		}

		public void ResetSelectionToStart(RichTextBox editor)
		{
			editor.SelectionStart = editor.SelectionLength = 0;
		}

		public void SetNextSelectionAndColor(RichTextBox editor)
		{
			editor.SelectionLength = 1;
			editor.SelectionColor = Color.WhiteSmoke;
			editor.SelectionStart++;
			editor.SelectionLength = 0;
		}

		public void SetAllTextToRegularFont(RichTextBox editor)
		{
			editor.SelectAll();
			editor.SelectionFont = new Font(editor.SelectionFont, FontStyle.Regular);
		}

		public void SetSelectedUnderscoreFont(RichTextBox editor)
		{
		}
	}
}
using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Shaykhullin.Lab6.Core;
using Shaykhullin.Lab6.ViewModels;

namespace Shaykhullin.Lab6
{
	public partial class CodeEditor : ModelView<CodeEditorViewModel>
	{
		private string prevText;

		public CodeEditor()
		{
			InitializeComponent();

			Editor = editor;
			OutputWindow = outputWindow;
			ProgressBar = toolStripProgressBar1;

			model = new CodeEditorViewModel();

			OnTextChanged(null, null);
		}

		public static TextBox OutputWindow { get; private set; }
		public static RichTextBox Editor { get; private set; }
		public static ToolStripProgressBar ProgressBar { get; private set; }

		[DllImport("user32.dll")]
		public static extern bool LockWindowUpdate(IntPtr hWndLock);

		private void OnKeyDown(object sender, KeyEventArgs args)
		{
			model.UpdateState(args);

			LockWindowUpdate(editor.Handle);
			model.TryExecuteCommand(editor, args);
			LockWindowUpdate(IntPtr.Zero);
		}

		private void OnTextChanged(object sender, EventArgs e)
		{
			if (prevText == editor.Text)
			{
				return;
			}

			prevText = editor.Text;
			OnOutputDisable(sender, e);

			var selection = editor.SelectionStart;
			LockWindowUpdate(editor.Handle);

			model.SetAllTextToRegularFont(editor);
			model.ResetSelectionToStart(editor);

			while (editor.SelectionStart < editor.Text.Length)
			{
				if (model.TryExecuteHighlighter(editor, editor.Text, editor.SelectionStart))
				{
					model.SetNextSelectionAndColor(editor);
				}
				else
				{
					var current = editor.Text[editor.SelectionStart];

					while (char.IsLetterOrDigit(current) && editor.Text.Length - 1 != editor.SelectionStart)
					{
						current = editor.Text[++editor.SelectionStart];
					}

					editor.SelectionStart++;
				}
			}

			editor.SelectionStart = selection;
			LockWindowUpdate(IntPtr.Zero);
		}

		private void OnOutputDisable(object sender, EventArgs e)
		{
			outputWindow.Visible = false;
		}
	}
}
namespace Shaykhullin.Lab6
{
  partial class CodeEditor
  {
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CodeEditor));
      this.editor = new System.Windows.Forms.RichTextBox();
      this.statusStrip1 = new System.Windows.Forms.StatusStrip();
      this.toolStripDropDownButton2 = new System.Windows.Forms.ToolStripDropDownButton();
      this.outputWindow = new System.Windows.Forms.TextBox();
      this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
      this.statusStrip1.SuspendLayout();
      this.SuspendLayout();
      // 
      // editor
      // 
      this.editor.AcceptsTab = true;
      this.editor.Anchor = System.Windows.Forms.AnchorStyles.None;
      this.editor.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(25)))), ((int)(((byte)(25)))), ((int)(((byte)(25)))));
      this.editor.BorderStyle = System.Windows.Forms.BorderStyle.None;
